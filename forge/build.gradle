buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url= 'https://repo.spongepowered.org/repository/maven-public/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

repositories {
    maven {
        url = 'https://maven.blamejared.com'
    }
}

rootProject.ext.set("platform_tag", "forge")

configurations {
    shade
    compileOnly.extendsFrom shade
    compileOnly.extendsFrom shadeSource
}


mixin {
    add sourceSets.main, "croptopia.refmap.json"
}

sourceSets {
    main {
        ext.refMap = "croptopia.refmap.json"
    }
}

minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=croptopia.mixins.json"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console //property 'forge.logging.console.level', 'debug'
            mods {
                croptopia {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            mods {
                croptopia {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'croptopia', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                croptopia {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {

    from(project(":common").sourceSets.main.resources.srcDirs) {
        include('**/data/croptopia/recipes/**')
        expand "dependant": "forge"
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.13'
    shade project(":common")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-48:api")
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}

shadowJar {
    enabled = true
    configurations = [project.configurations.shade]
    archiveFileName = rootProject.archives_base_name + "-${project.mc_ver}-FORGE-${rootProject.version}.jar"
    destinationDirectory = new File("${rootProject.projectDir}/build/jars")
    relocate 'dependants/platform', 'data/forge'
}

artifacts {
    archives shadowJar
    shadow shadowJar
}

jar {
    archiveFileName = rootProject.archives_base_name + "-${project.mc_ver}-FORGE-${rootProject.version}.jar"
    destinationDirectory = new File("${rootProject.projectDir}/build/jars")
    manifest {
        attributes([
                "Specification-Title": "croptopia",
                "Specification-Vendor": "thonk",
                "Specification-Version": "1",
                "Implementation-Title": "${archives_base_name}",
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"me thonk",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "croptopia.mixins.json"
        ])
    }
}

shadowJar.finalizedBy('reobfJar')
println(tasks.getAsMap())

//tasks.getByName("addRefMapToShadowJar").mustRunAfter(task("shadowJar"))
